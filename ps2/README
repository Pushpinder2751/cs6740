The application should operate as follows :
for encryption and signatures:
crypt.py -e destination_public_key_filename sender_private_key_filename input_plaintext_file ciphertext_file

for decryption and signature verification:
python fcrypt.py -d destination_private_key_filename sender_public_key_filename ciphertext_file output_plaintext_file

# command to generate openssl keys
%%bash
openssl genrsa -out private_key.pem 2048
openssl pkcs8 -topk8 -inform PEM -outform DER -in private_key.pem -out private_key.der -nocrypt
openssl rsa -in private_key.pem -pubout -outform DER -out public_key.der

My design is as follows :

# We assume that the sender and destination have already exchanged public keys

Encryption :

1. Open various files, generate key/iv(random 128 bit key/iv)
2. encrypt the AES(key + iv) using RSA/Asymmetric Encryption. Asymmetric is done on
   just key/iv as this is slow. Write it on ciphertext_file.
3. Sign using private key of the sender for verification/authenticity of the
   message. Write the signature on the ciphertext_file.
4. Use AES/symmetric Encryption to encrypt the plain_text. This is done because
the data file might be large and AES is a lot faster. Write it on ciphertext_file.


Decryption :

1. Open various files. Extract the RSA digest, signature from the ciphertext_file.
2. Verify signature using public key of the sender.
3. Decrypt AES(key + iv) from RSA message digest.
4. Decrypt the cipher to get the plain_text. Write it on to output file.
